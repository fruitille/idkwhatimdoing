{"version":3,"sources":["language sync /^/.*/.json$","data/constant.js","contexts/index.tsx","data/config.js","util/styles.tsx","components/atoms/DataLoader.tsx","components/organisms/Sidebar.tsx","util/commonComponent.tsx","components/atoms/CharacterSelect.tsx","components/molecules/CharacterGroup.tsx","components/organisms/CheckComponent.tsx","components/pages/MainPage.tsx","util/function.ts","components/atoms/CharacterResult.tsx","components/atoms/Downloader.tsx","components/atoms/CharacterTableView.tsx","components/molecules/CharacterTable.tsx","components/organisms/ResultManager.tsx","components/pages/ResultPage.tsx","components/pages/BookPage.tsx","components/pages/PersonalPage.tsx","components/atoms/CharacterManifest.tsx","components/pages/ManifestPage.tsx","App.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ELEMENTS","WEAPONS","STYLES","MANIFEST_STEPS","AnotherContext","createContext","lang","changeLang","word","version","changeVersion","value","inven","setInven","data","addInven","ids","removeInven","manifest","setManifest","changeManifest","level","select_char_data","char_codes","AnotherProvider","children","char_raw","require","useState","window","localStorage","getItem","setLang","setVersion","convert_data","local","split","Number","new_local","a","String","add","filter","includes","from","Array","Set","concat","sort","b","indexOf","style","Provider","setItem","newData","join","parsedData","JAP_NEW","GLO_NEW","JAP_MANIFEST_NEW","GLO_MANIFEST_NEW","StylemarkStyle","styled","img","PageWrapper","div","ImageWrapper","FlexColumnCenterDiv","GridDiv","TextArea","Input","DataLoaderStyle","DataLoader","useContext","UserData","setUserData","isOld","setIsOld","isModalVisible","setIsModalVisible","onClick","title","visible","onCancel","okButtonProps","display","placeholder","onChange","currentTarget","autoSize","minRows","maxRows","margin","type","jsonString","JSON","stringify","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","oldData","parse","trim","Swal","fire","text","width","timer","showConfirmButton","timerProgressBar","customClass","popup","then","location","reload","error","danger","Option","Select","footer","target","rel","a_css","css","SideMenu","Link","SideLink","Sidebar","formatMessage","useIntl","setVisible","path","pathname","replaceAll","check_endpoints","name","dict_endpoints","justifyContent","padding","backgroundColor","position","top","left","right","zIndex","shape","size","icon","UnorderedListOutlined","flexGrow","maxWidth","fontSize","fontWeight","lineHeight","placement","onClose","bodyStyle","flexDirection","end","index","to","color","Group","defaultValue","Button","minWidth","stylemark","src","directButtonLink","endpoint","height","marginTop","emptyImage","image","CharacterSelect","info","className","alt","CharacterGroup","infos","border","borderRadius","CheckComponent","codes","Search","MainPage","Element","setElement","Weapon","setWeapon","SearchName","setSearchName","filtered","toLowerCase","Math","floor","category","gonly","jonly","array","target_chars","new_char_to_top","flexWrap","idx","weapon","enterButton","allowClear","CharacterResult","toUpperCase","sky","Downloader","tag","getElementById","isIOS","isIOS13","isSafari","isMacOs","alert","html2canvas","canvas","toDataURL","replace","Date","now","domtoimage","toJpeg","quality","dataUrl","link","CharacterTableView","have","CharacterTable","overflowX","whiteSpace","slice","idx2","d","ResultManager","alignItems","marginBottom","Panel","Collapse","ResultPage","result_char_data","MyCharacter","renderNo","free","parsedCodes","first","render45","renderCC","tempIds","forEach","change","parsedIds","renderElement","defaultActiveKey","header","length","justify","align","xs","sm","Fragment","textAlign","BookPage","dungeon_link_data","book","columns","dataIndex","key","datasets","undefined","source","book_get","g","find","dataSource","pagination","colors","PersonalPage","person_data","setSearch","setInput","personalities","personality","item","temp","is_extra","description","content","ExclamationOutlined","closable","preventDefault","options","filterOption","inputValue","option","onSelect","onKeyDown","arr","CharacterManifest","maxStep","manifest_jap","manifest_glo","min","currentStep","setCurrentStep","useEffect","percent","newStep","max","MinusOutlined","PlusOutlined","ManifestPage","render_cc_id","get_manifest_status","styles","new_manifest_to_top","manifest_incomplete","steps","manifest_complete","manifestMessage","onConfirm","new_manifests","filtered_manifests","total_manifests","okText","cancelText","App","announceViewed","Boolean","message","removeItem","html","messages","locale","defaultLocale","basename","ReactGA","initialize","pageview","search","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.895749f2.chunk.js","sourcesContent":["var map = {\n\t\"./en.json\": 285,\n\t\"./jp.json\": 286,\n\t\"./ko.json\": 287\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 284;","// 속성, 무기를 분류할 때 사용하는 array입니다.\r\nexport const ELEMENTS = [ \"element\", \"fire\", \"water\", \"wind\", \"earth\", \"etc\" ]\r\nexport const WEAPONS =  [ \"weapon\", \"sword\", \"katana\", \"ax\", \"lance\", \"bow\", \"fists\", \"hammer\", \"staff\" ]\r\n\r\n// 스타일을 정렬할 때 사용하는 array입니다.\r\nexport const STYLES =   [ \"4.5\", \"ns\", \"as\", \"es\" ]\r\n\r\n// 현현의 순서와 관련된 array로 현현 관련 component에 다양하게 활용될 수 있습니다.\r\nexport const MANIFEST_STEPS = [ \"-\", \"현현\", \"진현현\" ]","import { createContext, useState } from \"react\";\r\nimport { STYLES } from \"../data/constant\";\r\n\r\n/**\r\n * 사이트 전반에 적용되는 context입니다. \r\n * \r\n * @param lang: 언어 정보, 기본값 ko (한국어), 로컬 스토리지에 a_lan으로 저장\r\n * @function changeLang\r\n * \r\n * @param version: 버전 정보, 기본값 global, 로컬 스토리지에 a_ver으로 저장\r\n * @function changeVersion\r\n * \r\n * @param inven: 보유 캐릭터 정보, 로컬 스토리지에 a_inv_new으로 저장\r\n * @function setInven\r\n * @function addInven : 보유 캐릭터 추가 함수\r\n * @function removeInven : 보유 캐릭터 추가 함수\r\n * \r\n * @param manifest: 보유 현현 정보, 진행상황*10000 + id로 저장, 로컬 스토리지에 a_man으로 저장\r\n * @function setManifest\r\n * @function changeManifest\r\n * \r\n * @param select_char_data : 체크 메뉴에서 쓰이는 캐릭터 데이터 배열\r\n * @param char_codes : 전체 캐릭터 코드 배열\r\n * \r\n * @description a_new는 구 버전 체크리스트에서 사용중이었으며 \r\n * 이는 사용자가 캐시를 지우지 않는 한 지우지 않습니다.\r\n */\r\nconst AnotherContext = createContext({\r\n    lang: \"ko\", \r\n    changeLang: (word: string) => {},\r\n    version: \"global\",\r\n    changeVersion: (value: string) => {},\r\n    inven: [] as number[],\r\n    setInven: (data: number[]) => {},\r\n    addInven: (ids : number[]) => {},\r\n    removeInven: (id : number) => {},\r\n    manifest: [] as number[],\r\n    setManifest: (data: number[]) => {},\r\n    changeManifest: (level: number, id: number) => {},\r\n    select_char_data: [] as Array<CharacterInfo>,\r\n    char_codes: [] as string[]\r\n})\r\n\r\ninterface Props {\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nconst AnotherProvider = ({ children }: Props): JSX.Element => {\r\n\r\n    // raw character data\r\n    const char_raw: Array<CharacterInfo> = require(\"../data/character.json\")\r\n\r\n    const [lang, setLang] = useState(window.localStorage.getItem(\"a_lan\") || \"ko\");\r\n    const changeLang = (word: string): void => {\r\n      setLang(word);\r\n      window.localStorage.setItem(\"a_lan\", word)\r\n    };\r\n\r\n    \r\n\r\n    const [version, setVersion] = useState(window.localStorage.getItem(\"a_ver\") || \"global\")\r\n    const changeVersion = (version: string): void => {\r\n      setVersion(version);\r\n      window.localStorage.setItem(\"a_ver\", version)\r\n    };\r\n\r\n\r\n\r\n    const [inven, setInven] = useState(() => {\r\n      // 기존 데이터와 현재 데이터를 match시켜주는 데이터\r\n      const convert_data = require(\"../data/old_to_new.json\")\r\n\r\n      // case에 따라서 데이터를 불러옵니다. 구 버전 데이터가 있는 경우 변환합니다.\r\n      const local = window.localStorage.getItem(\"a_inv\")?.split(\",\").map(Number) || [] as number[]\r\n      const new_local = window.localStorage.getItem(\"a_inv_new\")?.split(\",\").map(Number) || local.map(a => convert_data[String(a)] ?? -1 )\r\n\r\n      // from에 있는 캐릭터들은 필요조건이므로 없을 경우 추가시킵니다.\r\n      const add = char_raw.filter(a => new_local.includes(a.id)).map(a => a.from)\r\n\r\n      return Array.from(new Set(new_local.concat(...add)))\r\n    })\r\n    const addInven = (ids: number[]): void => {\r\n      const newData = Array.from(new Set([...inven, ...ids]))\r\n      window.localStorage.setItem(\"a_inv_new\", newData.join(\",\"))\r\n      setInven(newData);\r\n    };\r\n    const removeInven = (id: number): void => {\r\n      const newData = inven.filter(a => a !== id)\r\n      window.localStorage.setItem(\"a_inv_new\", newData.join(\",\"))\r\n      setInven(newData);\r\n    };\r\n\r\n\r\n\r\n    const [manifest, setManifest] = useState(window.localStorage.getItem(\"a_man\")?.split(\",\").map(Number) || [] as number[])\r\n    const changeManifest = (level:number, id: number): void => {\r\n      // 기존 현현 정보를 지우고 새로운 현현 정보를 넣습니다.\r\n      const parsedData = manifest.filter(a => a%10000 !== id)\r\n      const newData = Array.from(new Set([...parsedData, level*10000 + id]))\r\n      window.localStorage.setItem(\"a_man\", newData.join(\",\"))\r\n      setManifest(newData);\r\n    };\r\n\r\n\r\n\r\n    // select_char_data : code 우선, 그 다음 style로 정렬\r\n    const select_char_data = [...char_raw].sort((a,b) => {\r\n      if (a.code !== b.code) return a.code > b.code ? 1 : -1\r\n      else return STYLES.indexOf(a.style) - STYLES.indexOf(b.style)\r\n    })\r\n\r\n    const char_codes = Array.from(new Set(char_raw.map(a => a.code)))\r\n\r\n  \r\n    return (\r\n      <AnotherContext.Provider\r\n        value={{\r\n          lang,\r\n          changeLang,\r\n          version,\r\n          changeVersion,\r\n          inven,\r\n          setInven,\r\n          addInven,\r\n          removeInven,\r\n          manifest,\r\n          setManifest,\r\n          changeManifest,\r\n          select_char_data,\r\n          char_codes\r\n        }}>\r\n        {children}\r\n      </AnotherContext.Provider>\r\n    );\r\n};\r\n  \r\nexport { AnotherContext, AnotherProvider }","// 현재 버전을 저장하는 string 값입니다.\r\nexport const JAP_VER = \"2.13.20\"\r\nexport const GLO_VER = \"2.11.700\"\r\n\r\n// 현재 버전의 신규 캐릭터를 저장하는 array입니다.\r\n// 데이터 파일에서 이름을 찾아 코드로 입력해 주세요.\r\nexport const JAP_NEW = [\"101020011\", \"101000301\"]\r\nexport const GLO_NEW = [\"101040031\"]\r\n\r\n// 현재 버전의 신규 현현을 저장하는 array입니다.\r\n// 데이터 파일에서 이름을 찾아 id로 입력해 주세요.\r\nexport const JAP_MANIFEST_NEW = [113]\r\nexport const GLO_MANIFEST_NEW = [11,77]","import styled from \"styled-components\";\r\n\r\n// 캐릭터 아이콘 좌상단에 표시되는 스타일 마크의 styling\r\nexport const StylemarkStyle = styled.img`\r\n    position: absolute;\r\n    width: 30px;\r\n    left: -6px;\r\n    top: -6px;\r\n    z-index: 3;\r\n`\r\n\r\n// 페이지를 감싸는 div element의 기본 styling\r\nexport const PageWrapper = styled.div`\r\n    margin: 70px auto;\r\n    width: 97%;\r\n    padding: 20;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\n// image를 감싸는 div styling\r\nexport const ImageWrapper = styled.div`\r\n    position: relative;\r\n    width: 60px;\r\n    margin: 3px;\r\n    display: inline-block;\r\n`\r\n\r\n\r\n// 그 외 기본 div styling\r\nexport const FlexColumnCenterDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\nexport const GridDiv = styled.div`\r\n    display: grid;\r\n    padding: 3px;\r\n    gap: 2px 2px;\r\n    grid-template-columns: repeat(auto-fit, minmax(275px, 1fr));\r\n    justify-content: center;\r\n`\r\n\r\n","import { Button, Checkbox, Input, Modal } from 'antd'\r\nimport React, { useContext, useState} from 'react'\r\nimport styled from 'styled-components';\r\nimport Swal from 'sweetalert2';\r\nimport { AnotherContext } from '../../contexts';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst DataLoaderStyle = styled.div`\r\n    text-decoration: none;\r\n    font-size: 16px;\r\n    color: black;\r\n    font-weight: 600;\r\n    &:hover {\r\n        color: #1890ff;\r\n        transition: 0.5s;\r\n        cursor: pointer;\r\n    }\r\n    margin-bottom: 8px;\r\n`\r\n\r\n// 기존 데이터와 현재 데이터를 match시켜주는 데이터\r\nconst convert_data = require(\"../../data/old_to_new.json\")\r\n\r\n/**\r\n * DataLoader\r\n * \r\n * 체크리스트 사이트 데이터를 로컬에 저장하거나 \r\n * 텍스트 데이터를 바탕으로 데이터를 불러옵니다.\r\n */\r\nfunction DataLoader() {\r\n\r\n    // context load\r\n    const { inven, setInven, manifest, setManifest } = useContext(AnotherContext)\r\n    \r\n    /**\r\n     * @param UserData          유저가 입력한 데이터\r\n     * @param isOld             데이터의 구 버전 여부 (2022.5.02 이전)\r\n     * @param isModalVisible    모달의 보임 여부\r\n     */\r\n    const [UserData, setUserData] = useState(\"\")\r\n    const [isOld, setIsOld] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    // 현재 데이터를 txt 파일로 다운로드\r\n    // https://stackoverflow.com/questions/61237355/how-to-save-my-input-values-to-text-file-with-reactjs\r\n    const dataSave = () => {\r\n        const jsonString = JSON.stringify({\r\n            inven: inven,\r\n            manifest: manifest\r\n        })\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([jsonString], {type: 'text/plain'});\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"AEdata.txt\";\r\n        document.body.appendChild(element); // Required for this to work in FireFox\r\n        element.click();\r\n    }\r\n\r\n    // 텍스트를 캐시에 저장하고 사이트 데이터를 갱신\r\n    const dataLoad = () => {\r\n        try {\r\n            if (isOld) {\r\n                const oldData = UserData.split(\",\").map(a => convert_data[a] || -1)\r\n                window.localStorage.setItem(\"a_inv_new\", oldData.join(\",\"))\r\n                setInven(oldData)\r\n            } else {\r\n                const newData: SaveData = JSON.parse(UserData.trim())\r\n    \r\n                window.localStorage.setItem(\"a_inv_new\", newData.inven.join(\",\"))\r\n                setInven(newData.inven)\r\n                window.localStorage.setItem(\"a_man\", newData.manifest.join(\",\"))\r\n                setManifest(newData.manifest)\r\n            }\r\n            Swal.fire({\r\n                text: \"Data Load Success\",\r\n                width: 280,\r\n                timer: 2000,\r\n                showConfirmButton: false,\r\n                timerProgressBar: true,\r\n                customClass: {\r\n                    popup: \"alert\",\r\n                },\r\n            }).then(() => {\r\n                window.location.reload()\r\n            })\r\n        } catch (error) {\r\n            Swal.fire({\r\n                text: \"Data Load Error\",\r\n                width: 280,\r\n                timer: 1000,\r\n                showConfirmButton: false,\r\n                timerProgressBar: true,\r\n                customClass: {\r\n                    popup: \"alert\",\r\n                },\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DataLoaderStyle onClick={showModal}>DataLoader</DataLoaderStyle>\r\n            <Modal \r\n                title=\"Data Copy &#38; Load\" \r\n                visible={isModalVisible} \r\n                onCancel={handleCancel}\r\n                okButtonProps={{ style: {display: 'none'} }}\r\n            >\r\n                <TextArea placeholder=\"New data here\" value={UserData}\r\n                onChange={(e) => setUserData(e.currentTarget.value)}\r\n                autoSize={{ minRows: 4, maxRows: 4 }}/>\r\n                <br/><br/>\r\n                <Checkbox onChange={() => setIsOld(!isOld)}>Old Data (~22.05.02)</Checkbox>\r\n                <br/><br/>\r\n                <Button style={{margin: 5}} type=\"primary\" onClick={dataSave}>SAVE TXT</Button>\r\n                <Button style={{margin: 5}} type=\"primary\" onClick={dataLoad} danger>LOAD</Button>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DataLoader\r\n","import { UnorderedListOutlined } from '@ant-design/icons';\r\nimport { Button, Drawer, Radio, Select, Divider } from 'antd';\r\nimport React, { useContext, useState } from 'react'\r\nimport { useIntl } from 'react-intl';\r\nimport { Link } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components';\r\nimport { AnotherContext } from '../../contexts';\r\nimport { GLO_VER, JAP_VER } from '../../data/config';\r\nimport { FlexColumnCenterDiv } from '../../util/styles';\r\nimport DataLoader from '../atoms/DataLoader';\r\n\r\nconst { Option } = Select;\r\n\r\nconst footer = <div>\r\n    &copy; 2022. Made By <a href=\"https://github.com/HU-Lee\" target=\"_blank\" rel=\"noreferrer\">HU-Lee</a>\r\n</div>\r\n\r\nconst a_css = css`\r\n    text-decoration: none;\r\n    font-size: 16px;\r\n    color: black;\r\n    font-weight: 600;\r\n    &:hover {\r\n        color: #1890ff;\r\n        transition: 0.5s;\r\n    }\r\n`\r\n\r\nconst SideMenu = styled(Link)`${a_css}`\r\nconst SideLink = styled.a`\r\n    ${a_css}\r\n    font-size: 13px;\r\n`\r\n\r\n/**\r\n * Sidebar\r\n * \r\n * 메뉴를 표시하는 사이드바입니다.\r\n * 사이트 제목과 메뉴 버튼은 상단에 고정됩니다.\r\n */\r\nfunction Sidebar() {\r\n\r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { lang, version, changeLang, changeVersion } = useContext(AnotherContext)\r\n\r\n    /**\r\n     * @param visible: 사이드바의 표시 여부\r\n     * @param path: 현재 주소. 사이드바 메뉴를 강조할 때 참조한다.\r\n     */\r\n    const [visible, setVisible] = useState(false);\r\n    const path = window.location.pathname.replaceAll(\"/aetest\", \"\")\r\n\r\n    // 체크 관련 메뉴 옵션\r\n    const check_endpoints = [\r\n        {name: \"Checklist\", path: \"/\"},\r\n        {name: \"My Character\", path: \"/result\"},\r\n        {name: formatMessage({id: \"manifest\"}) + \" (Beta)\", path: \"/manifest\"}\r\n    ]\r\n\r\n    // 검색 관련 메뉴 옵션\r\n    const dict_endpoints = [\r\n        {name: formatMessage({id: \"books\"}) + \" (Beta)\", path: \"/books\"},\r\n        {name: formatMessage({id: \"personality\"}) + \" (Beta)\", path: \"/person\"}\r\n    ]\r\n\r\n    return (\r\n      <>\r\n        <div \r\n            style={{\r\n                display: \"flex\", \r\n                justifyContent: \"center\", \r\n                padding: \"10px 20px 10px 20px\", \r\n                backgroundColor: \"#E1F6FF\",\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                right: 0,\r\n                zIndex: 99\r\n            }}\r\n        >\r\n            <Button \r\n                type=\"primary\" \r\n                shape='circle'\r\n                size='large'\r\n                icon={<UnorderedListOutlined/>} \r\n                onClick={() => setVisible(true)}\r\n            />\r\n            <div style={{flexGrow: 1, maxWidth: 1300, fontSize: 20, fontWeight: 600, lineHeight: \"40px\"}}>\r\n                AE Check &#38; Tools\r\n            </div>\r\n        </div>\r\n        <Drawer \r\n            title=\"AE Check &#38; Tools\"\r\n            width={250}\r\n            placement=\"left\" \r\n            onClose={() => setVisible(false)} \r\n            visible={visible} \r\n            footer={footer}\r\n            bodyStyle={{display: 'flex', flexDirection: 'column'}}\r\n        >\r\n            <div style={{flexGrow: 1, display: 'flex', flexDirection: \"column\"}}>\r\n                {check_endpoints.map((end, index) => (\r\n                    <SideMenu key={index} to={end.path} onClick={() => setVisible(false)} style={{color: path===end.path ? \"red\" : \"\"}}>\r\n                        {end.name}\r\n                    </SideMenu>\r\n                ))}\r\n                <Divider/>\r\n                {dict_endpoints.map((end, index) => (\r\n                    <SideMenu key={index} to={end.path} onClick={() => setVisible(false)} style={{color: path===end.path ? \"red\" : \"\"}}>\r\n                        {end.name}\r\n                    </SideMenu>\r\n                ))}\r\n                <Divider/>\r\n                <DataLoader/>\r\n                <SideLink href=\"https://aecheck.tistory.com/\" rel=\"noreferrer\" target=\"_blank\" style={{fontSize: \"16px\"}}>\r\n                    Info Blog\r\n                </SideLink>\r\n                <Divider/>\r\n                <SideLink href=\"https://hu-lee.github.io/anotherdungeon/\" rel=\"noreferrer\" target=\"_blank\">\r\n                    Another Dungeon (Unused)\r\n                </SideLink>\r\n            </div>          \r\n            <FlexColumnCenterDiv style={{padding: 3}}>\r\n                <b>Language</b>\r\n                <Radio.Group \r\n                    defaultValue={lang} \r\n                    onChange={(e) => changeLang(e.target.value)}\r\n                    style={{margin: \"5px 0 15px 0\"}}\r\n                >\r\n                    <Radio.Button value=\"ko\">KOR</Radio.Button>\r\n                    <Radio.Button value=\"jp\">JAP</Radio.Button>\r\n                    <Radio.Button value=\"en\">ENG</Radio.Button>\r\n                </Radio.Group>\r\n                <b>Version</b>\r\n                <Select defaultValue={version} onChange={(value: string) => changeVersion(value)} style={{minWidth: 100}}>\r\n                    <Option value=\"global\">GLOBAL ({GLO_VER})</Option>\r\n                    <Option value=\"japanese\">JAPAN ({JAP_VER})</Option>\r\n                </Select>\r\n            </FlexColumnCenterDiv>\r\n        </Drawer>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Sidebar","import { Button, Empty } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { StylemarkStyle } from \"./styles\";\r\n\r\n/**\r\n * stylemark\r\n * \r\n * 캐릭터 아이콘 좌상단에 표시되는 스타일 마크\r\n * @param data : 해당하는 캐릭터의 json data\r\n */ \r\nexport const stylemark = (data: CharacterInfo) => (\r\n    data.style !== \"4.5\" ? <StylemarkStyle src={`images/category/${data.style}.png`}/> : null\r\n)\r\n\r\n/**\r\n * directButtonLink\r\n * \r\n * 페이지 상단에 배치하여 페이지 간 이동을 편하게 할 링크 버튼\r\n * @param endpoint : 목표 페이지의 endpoint\r\n * @param text : 버튼에 적을 문구\r\n */ \r\nexport const directButtonLink = (endpoint: string, text: string) => (\r\n    <Link to={endpoint}>\r\n        <Button \r\n            shape='round' \r\n            style={{ \r\n                height: 45, \r\n                width: 220, \r\n                fontSize: \"1.5rem\", \r\n                fontWeight: 600, \r\n                margin: 5,\r\n                marginTop: \"5px\"\r\n            }} \r\n            type=\"primary\" \r\n        >\r\n            {text}\r\n        </Button>\r\n    </Link>\r\n)\r\n\r\n/**\r\n * emptyImage\r\n * \r\n * 데이터가 없을 때 표시할 이미지\r\n */ \r\nexport const emptyImage = (\r\n    <Empty image=\"images/nodata.png\" style={{margin: 20}}/>\r\n)","import React, { useContext } from 'react'\r\nimport { AnotherContext } from '../../contexts'\r\nimport { stylemark } from '../../util/commonComponent'\r\nimport { ImageWrapper } from '../../util/styles'\r\n\r\n/**\r\n * CharacterSelect\r\n * Checklist에서 캐릭터를 선택할 수 있는 Component입니다.\r\n * \r\n * @param info  해당하는 캐릭터의 json data\r\n */\r\nconst CharacterSelect:React.FC<CharacterInfo> = (info) => {\r\n\r\n    // context load\r\n    const {addInven, removeInven, inven} = useContext(AnotherContext)\r\n\r\n    const toggleInven = (id: number) => {\r\n        if(inven.includes(id)) \r\n            removeInven(id)\r\n        else {\r\n            addInven([id, ...info.from])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ImageWrapper onClick={() => toggleInven(info.id)}>\r\n            {stylemark(info)}\r\n            <img className={!inven.includes(info.id) ? \"gray\" : \"\"} alt=\"select\" src={`images/character/${info.id}.png`} width={60}/>\r\n        </ImageWrapper>\r\n    )\r\n}\r\n\r\nexport default CharacterSelect\r\n","import React, { useContext } from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { AnotherContext } from '../../contexts'\r\nimport { GLO_NEW, JAP_NEW } from '../../data/config'\r\nimport { FlexColumnCenterDiv } from '../../util/styles'\r\nimport CharacterSelect from '../atoms/CharacterSelect'\r\n\r\n/**\r\n * CharacterGroup\r\n * Checklist의 캐릭터별 Component입니다.\r\n * \r\n * @param infos  해당하는 캐릭터의 json data array\r\n */\r\nconst CharacterGroup:React.FC<CharInfoProps> = ({infos}) => {\r\n\r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { version } = useContext(AnotherContext)\r\n\r\n    // 새로 나온 캐릭터 강조표시\r\n    const target_chars = version===\"japanese\" ? JAP_NEW : GLO_NEW\r\n    const color = target_chars.includes(infos[0].code) ? \"red\" : \"lightblue\"\r\n\r\n    return (\r\n        <FlexColumnCenterDiv\r\n            style={{\r\n                width: \"100%\",\r\n                padding: \"5px 2px 5px 2px\", \r\n                margin: '1px auto', \r\n                border: `2px solid ${color}`,\r\n                borderRadius: \"5px\"\r\n            }}\r\n        >\r\n            <b>\r\n                {formatMessage({id: infos[0].code})}\r\n                {color===\"red\" ? <b style={{color: \"red\"}}> (Update!)</b> : null}\r\n            </b>    \r\n            <div style={{marginTop: 3}}>               \r\n                {infos.map(info => (\r\n                    <CharacterSelect key={info.id} {...info}/>\r\n                ))}\r\n            </div>         \r\n        </FlexColumnCenterDiv>\r\n    )\r\n}\r\n\r\nexport default CharacterGroup\r\n","import React from 'react'\r\nimport { GridDiv } from '../../util/styles'\r\nimport CharacterGroup from '../molecules/CharacterGroup'\r\n\r\n/**\r\n * CheckComponent\r\n * MainPage의 필터를 제외한 체크리스트 부분 Component입니다.\r\n * \r\n * @param infos  해당하는 캐릭터의 json data array\r\n */\r\nconst CheckComponent:React.FC<CharInfoProps> = ({infos}) => {\r\n\r\n    // character code만 추출한 배열\r\n    const codes = Array.from(new Set(infos.map(a => a.code)))\r\n\r\n    return (\r\n        <GridDiv>\r\n            {codes.map(code => (\r\n                <CharacterGroup infos={infos.filter(a => a.code === code)} key={code}/>\r\n            ))}\r\n        </GridDiv>\r\n    )\r\n}\r\n\r\nexport default CheckComponent\r\n\r\n","import { Select, Input } from 'antd'\r\nimport React, { useContext, useState } from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { AnotherContext } from '../../contexts'\r\nimport { ELEMENTS, WEAPONS } from '../../data/constant'\r\nimport { directButtonLink } from '../../util/commonComponent'\r\nimport { new_char_to_top } from '../../util/function'\r\nimport { FlexColumnCenterDiv, PageWrapper } from '../../util/styles'\r\nimport CheckComponent from '../organisms/CheckComponent'\r\n\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\n\r\n/**\r\n * MainPage\r\n * \r\n * 가장 처음 보게 되는 페이지로, Checklist가 표시됩니다. \r\n */\r\nfunction MainPage() {\r\n\r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { select_char_data, version } = useContext(AnotherContext)\r\n\r\n    /**\r\n     * @param Element: 선택한 속성\r\n     * @param Weapon : 선택한 무기\r\n     * @param SearchName : 캐릭터 검색어\r\n     */\r\n    const [Element, setElement] = useState(0)\r\n    const [Weapon, setWeapon] = useState(0)\r\n    const [SearchName, setSearchName] = useState(\"\")\r\n\r\n    const HandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchName(e.target.value);\r\n    }\r\n\r\n    // 설정값에 따라 데이터를 filter\r\n    const filtered = select_char_data.filter(e => SearchName===\"\" || formatMessage({id: e.code}).toLowerCase().includes(SearchName.toLowerCase()))\r\n    .filter(e => Element===0 || Math.floor(e.category/10)===Element)\r\n    .filter(e => Weapon===0 || Math.floor(e.category%10)===Weapon)\r\n    .filter(e => {\r\n        if(version===\"japanese\") return !e.gonly\r\n        else return !e.jonly\r\n    })\r\n\r\n    new_char_to_top(filtered, version)\r\n\r\n    return (\r\n        <PageWrapper style={{maxWidth: \"1400px\"}}>\r\n            <div style={{display: \"flex\", justifyContent: \"center\", flexWrap: \"wrap\"}}>\r\n                {directButtonLink(\"/result\", \"Result\")}\r\n                {directButtonLink(\"/manifest\", formatMessage({id: \"manifest\"}))}\r\n            </div>\r\n            <FlexColumnCenterDiv style={{margin: \"15px\"}}>\r\n                <b>Filter</b>\r\n                <div style={{display:\"flex\", flexWrap: \"wrap\", justifyContent:\"center\"}}>\r\n                    <Select defaultValue={0} onChange={(value: React.SetStateAction<number>) => setElement(value)} style={{width:\"120px\", margin: \"5px\"}}>\r\n                        {ELEMENTS.map((element, idx) => (\r\n                            <Option value={idx} key={idx}>{formatMessage({id: element})}</Option>\r\n                        ))}\r\n                    </Select>\r\n                    <Select defaultValue={0} onChange={(value: React.SetStateAction<number>) => setWeapon(value)} style={{width:\"120px\", margin: \"5px\"}}>\r\n                        {WEAPONS.map((weapon, idx) => (\r\n                            <Option value={idx} key={idx}>{formatMessage({id: weapon})}</Option>\r\n                        ))}\r\n                    </Select>\r\n                    <Search \r\n                        style={{width:\"250px\", margin: \"5px\"}} \r\n                        placeholder=\"Search...\" \r\n                        value={SearchName} \r\n                        onChange={HandleChange}\r\n                        enterButton\r\n                        allowClear\r\n                    />\r\n                </div>\r\n            </FlexColumnCenterDiv>\r\n            <CheckComponent infos={filtered}/>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default MainPage\r\n","import { GLO_MANIFEST_NEW, GLO_NEW, JAP_MANIFEST_NEW, JAP_NEW } from \"../data/config\";\r\nimport { STYLES } from \"../data/constant\";\r\n\r\n\r\n/*\r\n--------------------------------------------\r\n            Sorting Function\r\n--------------------------------------------\r\n*/\r\n\r\n// 버전의 신 캐릭터를 맨 앞으로 보내도록 sort\r\nexport const new_char_to_top = (array: CharacterInfo[], version: string) => {\r\n    const target_chars = version===\"japanese\" ? JAP_NEW : GLO_NEW\r\n    array.sort((a,b) => !target_chars.includes(a.code) ? 1 : -1)\r\n    array.sort((a,b) => {\r\n        if(target_chars.includes(a.code)) {\r\n            return STYLES.indexOf(a.style) - STYLES.indexOf(b.style)\r\n        }\r\n        return 0\r\n    })\r\n}\r\n\r\n// 버전의 신 현현 캐릭터를 맨 앞으로 보내도록 sort\r\nexport const new_manifest_to_top = (array: CharacterInfo[], version: string) => {\r\n    const target_chars = version===\"japanese\" ? JAP_MANIFEST_NEW : GLO_MANIFEST_NEW\r\n    array.sort((a,b) => !target_chars.includes(a.id) ? 1 : -1)\r\n}","import { Tooltip } from 'antd'\r\nimport React, { useContext } from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { AnotherContext } from '../../contexts'\r\nimport { ELEMENTS, WEAPONS } from '../../data/constant'\r\n\r\n/**\r\n * CharacterResult\r\n * My Character의 결과를 나타내는 Component입니다.\r\n * \r\n * @param info  해당하는 캐릭터의 json data\r\n */\r\nconst CharacterResult:React.FC<CharacterInfo> = (info) => {\r\n    \r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { version } = useContext(AnotherContext)\r\n\r\n    // Tooltip과 View에 표시하기 위해 속성과 무기 값을 추출\r\n    const element = ELEMENTS[Math.floor(info.category/10)]\r\n    const weapon =  WEAPONS[info.category%10]\r\n\r\n    return (\r\n        <Tooltip title={`${formatMessage({id: info.code})}${info.style !== \"4.5\" ? \" \" + info.style.toUpperCase() : \"\"}\r\n                       - ${formatMessage({id: info.sky})}, ${formatMessage({id: weapon})}`}>\r\n            <img \r\n                src={`images/character/${info.id}.png`} \r\n                alt=\"result\" \r\n                className={ `${version===\"global\" && info.jonly ? \"trans\" : \"\"} ${element}`}\r\n                style={{width: \"18%\", maxWidth:65, borderRadius:3, margin:1 }}\r\n            />\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nexport default CharacterResult\r\n","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport domtoimage from 'dom-to-image';\r\nimport html2canvas from 'html2canvas';\r\nimport { isIOS, isIOS13, isMacOs, isSafari } from 'react-device-detect';\r\n\r\ninterface DownloaderProps {\r\n    tag: string;\r\n}\r\n\r\n/**\r\n * Downloader\r\n * \r\n * 특정 태그가 달린 div 영역을 이미지로 다운로드할 수 있게 합니다.\r\n * 일부 기기에서 동작하지 않을 수도 있습니다.\r\n * \r\n * @param tag\r\n */\r\nconst Downloader: React.FC<DownloaderProps> = ({ tag }) => {\r\n\r\n    const handleSaveClick = () => {\r\n        const element = document.getElementById(tag)\r\n        if (!element) return;\r\n        // ios의 경우 html2canvas, 아닐 경우 domtoimage를 이용\r\n        if ( isIOS || isIOS13 || isSafari || isMacOs) {\r\n            alert('alternative Downloader for iOS & Safari')\r\n            html2canvas(element).then(function(canvas) {\r\n                let a = document.createElement('a');\r\n                a.href = canvas.toDataURL(\"image/jpeg\").replace(\"image/jpeg\", \"image/octet-stream\")\r\n                a.download = `c${Date.now()}.png`;\r\n                a.click();\r\n            })\r\n        } else {\r\n            domtoimage.toJpeg(element, { quality: 1 })\r\n            .then(function (dataUrl) {\r\n               var link = document.createElement('a');\r\n               link.download = `c${Date.now()}.png`;\r\n               link.href = dataUrl;\r\n               link.click();\r\n           });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Button shape='round' style={{ height: 35, width: 110, fontSize: \"1rem\", fontWeight: 600, margin: 5}} type=\"primary\" danger onClick={handleSaveClick}>Download</Button>\r\n    )\r\n}\r\n\r\nexport default Downloader\r\n","import { Tooltip } from 'antd'\r\nimport React from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { WEAPONS } from '../../data/constant'\r\nimport { stylemark } from '../../util/commonComponent'\r\nimport { ImageWrapper } from '../../util/styles'\r\n\r\n/**\r\n * CharacterTableView\r\n * CharacterTable의 단위 Component입니다.\r\n * \r\n * @param info  해당하는 캐릭터의 json data (+ 보유 정보)\r\n */\r\nconst CharacterTableView:React.FC<CharacterTableViewProps> = (info) => {\r\n\r\n    // intl load\r\n    const { formatMessage } = useIntl()\r\n    \r\n    // Tooltip에 표시하기 위해 무기 값을 추출\r\n    const weapon = WEAPONS[info.category%10]\r\n\r\n    return (\r\n        <Tooltip title={`${formatMessage({id: info.code})}${info.style !== \"4.5\" ? \" \" + info.style.toUpperCase() : \"\"}\r\n                       - ${formatMessage({id: info.sky})}, ${formatMessage({id: weapon})}`}>\r\n            <ImageWrapper>\r\n                {stylemark(info)}\r\n                <img className={!info.have ? \"gray\" : \"\"} alt=\"select\" src={`images/character/${info.id}.png`} width={60}/>\r\n            </ImageWrapper>\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nexport default CharacterTableView\r\n","import { Button, Modal } from 'antd';\r\nimport React, { useContext, useState } from 'react'\r\nimport { useIntl } from 'react-intl';\r\nimport { AnotherContext } from '../../contexts';\r\nimport { ELEMENTS, WEAPONS } from '../../data/constant';\r\nimport CharacterTableView from '../atoms/CharacterTableView';\r\nimport Downloader from '../atoms/Downloader';\r\n\r\n/**\r\n * CharacterTable\r\n * \r\n * 캐릭터 보유 현황을 테이블로 보여주는 Component입니다.\r\n * 5성 캐릭터만 표시합니다.\r\n */\r\nfunction CharacterTable() {\r\n\r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { inven, select_char_data, version } = useContext(AnotherContext)\r\n\r\n    /**\r\n     * @param isModalVisible    모달의 보임 여부\r\n     */\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button style={{ height: \"35px\", width: \"110px\", fontSize: \"0.9rem\", fontWeight: 600, margin: 5}} \r\n            onClick={showModal} type='dashed' shape='round' >Table View</Button>\r\n            <Modal title=\"Table\" visible={isModalVisible} onCancel={handleCancel} width=\"85%\"\r\n            okButtonProps={{ style: { display: 'none' } }}>\r\n                <b>{formatMessage({id: \"tableinfo\"})}</b>\r\n                <br/>\r\n                <Downloader tag='chartable'/>\r\n                <div style={{margin:\"20px 0 0 0\", overflowX: \"scroll\"}}>\r\n                    <table style={{minWidth: \"1280px\", margin: \"0 auto\", maxWidth: \"1280px\", backgroundColor:\"white\", whiteSpace: \"normal\"}} id=\"chartable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{width: 70}}></th>\r\n                                {ELEMENTS.slice(1).map((element, idx) => (\r\n                                    <th key={idx}>\r\n                                        {element === \"lunatic\" ? <>\r\n                                            <b style={{fontSize:\"1.2rem\"}}>Lunatic + </b>\r\n                                        </> : null}\r\n                                        <img style={{width: 50}} src={`images/category/${element}.png`} alt={element}/>\r\n                                    </th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {WEAPONS.slice(1).map((weapon, idx) => (\r\n                                <tr key={idx}>\r\n                                    <td>\r\n                                        <img style={{width: 50}} src={`images/category/${weapon}.png`} alt={weapon}/>\r\n                                    </td>\r\n                                    {ELEMENTS.slice(1).map((element, idx2) => (\r\n                                        <td key={idx2} className={(idx+idx2)%2===1 ? \"odd\" : \"even\"} style={{padding:\"5px 0 5px 0\"}}>\r\n                                            {select_char_data.filter(a => idx2+1 === Math.floor(a.category/10) && idx+1 === a.category%10)\r\n                                            .filter(a => a.style !== \"4.5\")\r\n                                            .filter(e => version===\"japanese\" || !e.jonly)\r\n                                            .map((d) => (\r\n                                                <CharacterTableView key={d.id} {...d} have={inven.includes(d.id)}/>\r\n                                            ))}\r\n                                        </td>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharacterTable\r\n","import React from 'react'\r\nimport Downloader from '../atoms/Downloader'\r\nimport CharacterTable from '../molecules/CharacterTable'\r\n\r\n/**\r\n * ResultManager\r\n * \r\n * 결과를 관리하는 Component입니다.\r\n * 이미지 다운로더와 Table View로 구성되어 있습니다.\r\n */\r\nfunction ResultManager() {\r\n    return (\r\n        <div style={{display:\"flex\", flexWrap: \"wrap\", alignItems:\"center\", justifyContent: \"center\", marginBottom: '20px'}}>\r\n            <Downloader tag='checkresult'/>\r\n            <CharacterTable/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultManager\r\n","import { Collapse, Row, Col, Divider } from 'antd';\r\nimport React, { useContext } from 'react'\r\nimport { useIntl } from 'react-intl';\r\nimport { AnotherContext } from '../../contexts'\r\nimport { ELEMENTS, STYLES } from '../../data/constant';\r\nimport { directButtonLink } from '../../util/commonComponent';\r\nimport { PageWrapper } from '../../util/styles';\r\nimport CharacterResult from '../atoms/CharacterResult';\r\nimport ResultManager from '../organisms/ResultManager';\r\n\r\nconst { Panel } = Collapse;\r\n\r\n/**\r\n * ResultPage\r\n * \r\n * 체크리스트를 토대로 여러 유용한 결과를 표시해 줍니다.\r\n */\r\nfunction ResultPage() {\r\n\r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { select_char_data, char_codes, inven, version } = useContext(AnotherContext)\r\n\r\n    // result_char_data : 단어순 + 속성 정렬\r\n    const result_char_data = [...select_char_data].sort(function(a, b) {\r\n      return formatMessage({id: a.code}) < formatMessage({id: b.code}) ? -1 \r\n           : formatMessage({id: a.code}) > formatMessage({id: b.code}) ? 1 : 0;\r\n    }).sort(function(a, b) {\r\n      return Math.floor(a.category/10) - Math.floor(b.category/10)\r\n    });\r\n    \r\n    /**\r\n     * @param MyCharacter: 가지고 있는 캐릭터의 정보. 출시되지 않은 데이터가 있는 경우 제외시킨다.\r\n     */\r\n    const MyCharacter: CharacterInfo[] = result_char_data.filter(info => inven.includes(info.id))\r\n    .filter(e => {\r\n        if(version===\"japanese\") return !e.gonly\r\n        else return !e.jonly\r\n    })\r\n\r\n    // 명함도 없는 캐릭터를 계산하는 함수 (배포 여부에 따라)\r\n    const renderNo = (free: boolean) => {\r\n        // 1.   없는 캐릭터들의 코드 배열을 계산\r\n        const parsedCodes = char_codes.filter(code => !MyCharacter.map(a => a.code).includes(code))\r\n\r\n        // 2.   배열 필터링 : 맨 첫 번째고, 배포 여부가 설정된 값과 같은 경우를 반환 \r\n        //      + 출시되지 않은 데이터가 있는 경우 제외시킨다.\r\n        const parsedData = result_char_data.filter(info => parsedCodes.includes(info.code) && info.first && info.free === free)\r\n        .filter(e => {\r\n            if(version===\"japanese\") return !e.gonly\r\n            else return !e.jonly\r\n        })\r\n\r\n        return parsedData.map((info, index) => (\r\n            <CharacterResult key={index} {...info}/>\r\n        ))\r\n    }\r\n\r\n    // 4.5성만 있는 캐릭터를 계산하는 함수 (배포 여부에 따라)\r\n    const render45 = (free: boolean) => {\r\n        // 1.   4.5성만 있는 캐릭터들의 코드 배열을 계산\r\n        const parsedCodes = char_codes.filter(code => JSON.stringify(MyCharacter.filter(a => a.code===code).map(a => a.style)) === `[\"4.5\"]`)\r\n        \r\n        // 2.   배열 필터링 : 배포 여부가 설정된 값과 같은 경우를 반환 \r\n        //      + 출시되지 않은 데이터가 있는 경우 제외시킨다.\r\n        const parsedData = MyCharacter.filter(info => parsedCodes.includes(info.code) && info.free === free)\r\n        .filter(e => {\r\n            if(version===\"japanese\") return !e.gonly\r\n            else return !e.jonly\r\n        })\r\n\r\n        return parsedData.map((info, index) => (\r\n            <CharacterResult key={index} {...info}/>\r\n        ))\r\n    }\r\n\r\n    // 클래스 체인지 가능 캐릭터를 계산하는 함수 (스타일에 따라)\r\n    const renderCC = (style: string) => {\r\n        // 1. 가지고 있는 캐릭터들의 CC 목록을 전부 합친다.\r\n        let tempIds = [] as number[]\r\n        MyCharacter.forEach((a) => {\r\n            tempIds = tempIds.concat(a.change)\r\n        })\r\n\r\n        // 2. 인벤에 없고 스타일이 설정된 값과 같은 경우를 반환 \r\n        const parsedIds = Array.from(new Set(tempIds)).filter(id => !inven.includes(id))\r\n        const parsedData = result_char_data.filter(info => info.style===style && parsedIds.includes(info.id))\r\n\r\n        return parsedData.map((info, index) => (\r\n            <CharacterResult key={index} {...info}/>\r\n        ))\r\n    }\r\n\r\n    // 속성별 보유 캐릭터를 계산하는 함수\r\n    const renderElement = (element: number) => {\r\n        // 4.5성은 제외\r\n        const parsedData = MyCharacter.filter(info => element === Math.floor(info.category/10) && info.style !== \"4.5\")\r\n\r\n        return parsedData.map((info, index) => (\r\n            <CharacterResult key={index} {...info}/>\r\n        ))\r\n    }\r\n    \r\n\r\n    return (\r\n        <PageWrapper style={{maxWidth: \"1100px\"}}>\r\n            {directButtonLink(\"/\", \"Back to Checklist\")}\r\n            <Divider style={{margin: 5}}/>\r\n            <ResultManager/>\r\n            <div id=\"checkresult\">\r\n                <Collapse defaultActiveKey={['1', '2', '3', '4']} style={{fontSize: \"1rem\", fontWeight: 600}}>\r\n                    <Panel header={`${formatMessage({id: \"resultmenu1\"})} (${renderNo(false).length} + ${renderNo(true).length})`} key=\"1\">\r\n                        <Row justify=\"center\" align=\"middle\" style={{marginBottom:\"30px\"}}>\r\n                            <Col xs={24} sm={4}><b>Not Free</b></Col>\r\n                            <Col xs={23} sm={20}>{renderNo(false)}</Col>\r\n                            <Divider style={{margin: 15}}/>\r\n                            <Col xs={24} sm={4}><b>Free</b></Col>\r\n                            <Col xs={23} sm={20}>{renderNo(true)}</Col>\r\n                        </Row>\r\n                    </Panel>\r\n                    <Panel header={`${formatMessage({id: \"resultmenu2\"})} (${render45(false).length} + ${render45(true).length})`} key=\"2\">\r\n                        <Row justify=\"center\" align=\"middle\" style={{marginBottom:\"30px\"}}>\r\n                            <Col xs={24} sm={4}><b>Not Free</b></Col>\r\n                            <Col xs={23} sm={20}>{render45(false)}</Col>\r\n                            <Divider style={{margin: 15}}/>\r\n                            <Col xs={24} sm={4}><b>Free</b></Col>\r\n                            <Col xs={23} sm={20}>{render45(true)}</Col>\r\n                        </Row>\r\n                    </Panel>\r\n                    <Panel header={formatMessage({id: \"resultmenu3\"})} key=\"3\">\r\n                        <Row align=\"middle\" justify=\"center\" style={{marginTop: \"5px\"}}>\r\n                            {STYLES.slice(1).map(style => (\r\n                                <React.Fragment key={style}>\r\n                                    <Col xs={24} sm={4}>\r\n                                        <img src={`images/category/${style}.png`} alt={style} width=\"40\"/>\r\n                                    </Col>\r\n                                    <Col xs={23} sm={20} style={{textAlign: \"left\", marginBottom:\"5px\"}}>\r\n                                        {renderCC(style)}\r\n                                    </Col>\r\n                                    {style !== \"es\" ? <Divider style={{margin: 15}}/> : null}\r\n                                </React.Fragment>\r\n                            ))}     \r\n                        </Row>\r\n                    </Panel>\r\n                    <Panel header={formatMessage({id: \"resultmenu4\"})} key=\"4\">\r\n                        {ELEMENTS.slice(1).map((element, idx) => (\r\n                            <Row key={idx} align=\"middle\" justify=\"center\" style={{marginBottom:\"5px\"}}>\r\n                                <Col xs={24} sm={4}>\r\n                                    {element === \"etc\" ? <>\r\n                                        <b>Lunatic</b><br/>\r\n                                        <b>+</b><br/>\r\n                                    </> : null}\r\n                                    <img alt={element} src={`images/category/${element}.png`} width=\"40\"/>\r\n                                </Col>\r\n                                <Col xs={23} sm={20} style={{textAlign: \"left\"}}>\r\n                                    {renderElement(idx+1)}\r\n                                </Col>\r\n                                {element !== \"etc\" ? <Divider style={{margin: \"15px auto\"}}/> : null}\r\n                            </Row>\r\n                        ))}\r\n                    </Panel>\r\n                </Collapse>\r\n            </div>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default ResultPage\r\n","import React, { useContext, useState } from 'react'\r\nimport { Input, Button, Table } from 'antd'\r\nimport { AnotherContext } from '../../contexts';\r\nimport { useIntl } from 'react-intl';\r\nimport { FlexColumnCenterDiv, PageWrapper } from '../../util/styles';\r\n\r\nconst { Search } = Input;\r\n\r\n/**\r\n * BookPage\r\n * \r\n * 직업서를 검색하는 페이지입니다.\r\n */\r\nfunction BookPage() {\r\n\r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { select_char_data } = useContext(AnotherContext)\r\n\r\n    /**\r\n     * @param dungeon_link_data: 던전 이름과 알테마 링크를 매칭시킨 데이터\r\n     * @param SearchName : 검색어\r\n     */ \r\n    const dungeon_link_data: Array<DungeonLinkInfo> = require(\"../../data/dungeon.json\")\r\n    const [SearchName, setSearchName] = useState(\"\")\r\n\r\n    const HandleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchName(e.target.value);\r\n    }\r\n\r\n    // 설정값에 따라 데이터를 filter. 이름 또는 직업서 둘 중 하나만 해당되면 된다.\r\n    const filtered = select_char_data.filter(e => e.book !== \"없음\")\r\n    .filter(e => SearchName===\"\" \r\n        || (formatMessage({id: e.code}) + `(${e.style})`).toLowerCase().includes(SearchName.toLowerCase()) \r\n        || formatMessage({id: e.book}).toLowerCase().includes(SearchName.toLowerCase())\r\n    )\r\n\r\n    const columns = [\r\n        {\r\n          title: formatMessage({id: \"name\"}),\r\n          dataIndex: 'name',\r\n          key: 'name',\r\n          align: 'center' as 'center',\r\n          width: 100\r\n        },\r\n        {\r\n          title: formatMessage({id: \"books\"}),\r\n          dataIndex: 'book',\r\n          key: 'book',\r\n          align: 'center' as 'center',\r\n          width: 150\r\n        },\r\n        {\r\n          title: formatMessage({id: \"source\"}),\r\n          dataIndex: 'source',\r\n          key: 'source',\r\n          align: 'center' as 'center',\r\n        },\r\n    ];\r\n\r\n    const datasets = filtered.map((info, index) => ({\r\n        name: <FlexColumnCenterDiv>\r\n            <img alt=\"select\" src={`images/character/${info.id}.png`} width={50}/>\r\n            <b style={ SearchName!==\"\" && (formatMessage({id: info.code}) + `(${info.style})`).toLowerCase().includes(SearchName.toLowerCase()) ? {\r\n                color: \"red\"\r\n            } : undefined}>\r\n                {(formatMessage({id: info.code}) + `(${info.style.toUpperCase()})`)}\r\n            </b>\r\n        </FlexColumnCenterDiv>,\r\n        book: <b style={ SearchName!==\"\" && formatMessage({id: info.book}).toLowerCase().includes(SearchName.toLowerCase()) ? {\r\n            color: \"red\"\r\n        } : undefined}>\r\n            {formatMessage({id: info.book})}\r\n        </b>,\r\n        source: <div style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            flexWrap: \"wrap\"\r\n        }}>\r\n            {info.book_get.map((g, index) => (\r\n                [\"이절\", \"개전\", \"경전록\"].includes(g) ? <b key={index}>{formatMessage({id: g})}</b> : \r\n                <a href={`https://altema.jp/anaden/${dungeon_link_data.find(a => a.name === g)?.endpoint}`} rel=\"noreferrer\" target=\"_blank\" key={index}>\r\n                    <Button style={{fontSize: '12px', margin: '1px'}}>{formatMessage({id: g})}</Button>\r\n                </a>\r\n            ))}\r\n        </div>\r\n    }))\r\n\r\n    return (\r\n        <PageWrapper  style={{maxWidth: \"900px\", alignItems: \"center\"}}>\r\n            <Search \r\n                style={{width:\"250px\", margin: \"0.2rem 8px 1rem 8px\"}} \r\n                placeholder={`${formatMessage({id: \"name\"})}, ${formatMessage({id: \"books\"})}`}\r\n                value={SearchName} \r\n                onChange={HandleChange}\r\n                enterButton\r\n                allowClear\r\n            />\r\n            <Table dataSource={datasets} columns={columns} size=\"small\" pagination={{ position: [\"topLeft\", \"bottomLeft\"] }}/>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default BookPage","import { ExclamationOutlined } from '@ant-design/icons'\r\nimport { AutoComplete, Button, Popover, Table, Tag } from 'antd'\r\nimport React, { useState } from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { FlexColumnCenterDiv, PageWrapper } from '../../util/styles'\r\n\r\nconst colors = [\"magenta\", \"volcano\", \"gold\", \"green\", \"cyan\", \"blue\", \"purple\"]\r\n\r\n/**\r\n * PersonalPage\r\n * \r\n * 캐릭터 특성을 검색하는 페이지입니다.\r\n */\r\nfunction PersonalPage() {\r\n\r\n    // intl load\r\n    const { formatMessage } = useIntl()\r\n    \r\n    /**\r\n     * @param person_data: 퍼스널리티 데이터\r\n     * @param Search : 퍼스널리티 검색 목록\r\n     * @param Input : 검색어\r\n     */ \r\n    const person_data: Array<PersonalityInfo> = require(\"../../data/personality.json\")\r\n    const [Search, setSearch] = useState([] as string[])\r\n    const [Input, setInput] = useState(\"\")\r\n\r\n    const personalities = () => {\r\n        let data: string[] = []\r\n        person_data.forEach(a => {\r\n            data = data.concat(a.personality)\r\n        })\r\n        return Array.from(new Set(data)).map(a => ( \r\n          { name: a,  value : formatMessage({id: a}) } \r\n      ))\r\n    }\r\n\r\n    // filtering\r\n    const filtered = person_data.filter(item => {\r\n        let temp = true;\r\n        Search.forEach(b => {\r\n            if(item.personality.indexOf(b) === -1)\r\n                temp = false;\r\n        })\r\n        return temp;\r\n    })\r\n\r\n    // 엔터 시 자동완성 (불완전)\r\n    const onKeyDown = (e: React.KeyboardEvent<HTMLDivElement> | React.ChangeEvent<HTMLDivElement>) => {\r\n        const {key} = (e as React.KeyboardEvent<HTMLInputElement>)\r\n        const {target} = (e as React.ChangeEvent<HTMLInputElement>)\r\n        if(key === \"Enter\") {\r\n            const arr = personalities().filter(a => a.value.toUpperCase().includes(target.value.toUpperCase()))\r\n            if(arr.length > 0) {\r\n                setSearch(Array.from(new Set([...Search, arr[0].name])))\r\n                setInput(\"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClose = (tag: string) => {\r\n        setSearch(Search.filter(item => item !== tag))\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n          title: formatMessage({id: \"name\"}),\r\n          dataIndex: 'name',\r\n          key: 'name',\r\n          align: 'center' as 'center',\r\n          width: 100\r\n        },\r\n        {\r\n          title: formatMessage({id: \"personality\"}),\r\n          dataIndex: 'personality',\r\n          key: 'personality',\r\n          align: 'center' as 'center',\r\n          width: 200\r\n        },\r\n        {\r\n          title: \"\",\r\n          dataIndex: 'description',\r\n          key: 'description',\r\n          align: 'center' as 'center',\r\n        }\r\n    ];\r\n\r\n    const datasets = filtered.map((info, index) => {\r\n      return {\r\n        name: <FlexColumnCenterDiv>\r\n            <img alt=\"select\"\r\n                    src={`images/personality/${info.name}${info.is_extra ? \"(ES)\" : \"\"}.png`} \r\n                style={{width:50, borderRadius:3 }}/>\r\n            <b>\r\n                {formatMessage({id: info.name}) + (info.is_extra ? \"(ES)\" : \"\")}\r\n            </b>\r\n        </FlexColumnCenterDiv>,\r\n        personality: <FlexColumnCenterDiv>\r\n            <div>\r\n              {info.personality.map((a,index) => (\r\n                  <Tag style={{margin: '1px'}} color={colors[index%7]} key={index}>{formatMessage({id: a})}</Tag>\r\n              ))}\r\n            </div>\r\n        </FlexColumnCenterDiv>,\r\n        description: info.description ? <Popover content={<b style={{color: 'red'}}>{info.description}</b>}>\r\n            <Button type=\"default\" shape='circle' danger icon={<ExclamationOutlined />}/>\r\n        </Popover> : null \r\n      }\r\n    })\r\n\r\n  return (\r\n        <PageWrapper  style={{maxWidth: \"900px\", alignItems: \"center\"}}>\r\n            <div style={{display: 'flex', maxWidth: '400px', flexWrap: 'wrap', margin: '10px 10px 10px 10px'}}>\r\n                {Search.map((a, index) => (\r\n                    <Tag style={{margin: '1px'}} color={colors[index%7]} key={index} closable \r\n                    onClose={(e) => {\r\n                        e.preventDefault()\r\n                        handleClose(a)\r\n                    }}>\r\n                        {formatMessage({id: a})}\r\n                    </Tag>\r\n                ))}\r\n            </div>            \r\n            <AutoComplete\r\n                style={{ width: 250, marginBottom: '30px'}}\r\n                options={personalities()}\r\n                value={Input}\r\n                filterOption={(inputValue, option) =>\r\n                    option?.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n                }\r\n                placeholder={formatMessage({id: \"personality\"})}\r\n                onChange={(value: string) => setInput(value)}\r\n                onSelect={(value: string) => {\r\n                    const b = personalities().filter(a => a.value.toUpperCase() === value.toUpperCase()).map(a => a.name)\r\n                    setSearch(Array.from(new Set([...Search, ...b])))\r\n                    setInput(\"\")\r\n                }}\r\n                onKeyDown={onKeyDown}\r\n            />\r\n            <Table dataSource={datasets} columns={columns} size=\"small\" pagination={{ position: [\"topLeft\", \"bottomLeft\"] }} style={{\r\n                minWidth: 300\r\n            }}/>\r\n        </PageWrapper>\r\n  )\r\n}\r\n\r\nexport default PersonalPage","import { MinusOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport { Button, Progress } from 'antd'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { AnotherContext } from '../../contexts'\r\nimport { GLO_MANIFEST_NEW, JAP_MANIFEST_NEW } from '../../data/config'\r\nimport { MANIFEST_STEPS } from '../../data/constant'\r\nimport { stylemark } from '../../util/commonComponent'\r\nimport { FlexColumnCenterDiv, ImageWrapper } from '../../util/styles'\r\n\r\n/**\r\n * CharacterManifest\r\n * 캐릭터의 현현 진행도를 나타내는 Component입니다.\r\n * \r\n * @param info  해당하는 캐릭터의 json data\r\n */\r\nconst CharacterManifest:React.FC<CharacterInfo> = (info) =>  {\r\n\r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { manifest, changeManifest, version } = useContext(AnotherContext)\r\n    \r\n    /**\r\n     * @param maxStep       버전에 따른 현현 최대 진행도\r\n     * @param currentStep   현재 현현 진행도\r\n     */\r\n    const maxStep = version===\"japanese\" ? MANIFEST_STEPS.indexOf(info.manifest_jap) : MANIFEST_STEPS.indexOf(info.manifest_glo)\r\n    const [currentStep, setCurrentStep] = useState(Math.min(maxStep, Math.floor(manifest.filter(a => a%10000 === info.id)[0]/10000)) || 0)\r\n\r\n    useEffect(() => {\r\n        if (maxStep < currentStep) setCurrentStep(maxStep)\r\n    }, [maxStep, currentStep])\r\n    \r\n\r\n    const onMinus = () => {\r\n        const newStep = Math.max(0, currentStep-1)\r\n        changeManifest(newStep, info.id)\r\n        setCurrentStep(newStep)\r\n    } \r\n\r\n    const onPlus = () => {\r\n        const newStep = Math.min(maxStep, currentStep+1)\r\n        changeManifest(newStep, info.id)\r\n        setCurrentStep(newStep)\r\n    } \r\n\r\n    // 새로 현현이 있는 캐릭터 강조표시\r\n    const target_chars = version===\"japanese\" ? JAP_MANIFEST_NEW : GLO_MANIFEST_NEW\r\n    const color = target_chars.includes(info.id) ? \"red\" : \"lightblue\"\r\n\r\n    return (\r\n        <FlexColumnCenterDiv\r\n            style={{\r\n                width: \"100%\",\r\n                padding: \"5px\", \r\n                margin: '1px auto', \r\n                border: `2px solid ${color}`,\r\n                borderRadius: \"5px\"\r\n            }}\r\n        >\r\n            <b>\r\n                {formatMessage({id: info.code})}({info.style.toUpperCase()})\r\n                {color===\"red\" ? <b style={{color: \"red\"}}> (Update!)</b> : null}\r\n            </b>\r\n            <ImageWrapper>\r\n                {stylemark(info)}\r\n                <img alt=\"select\" src={`images/character/${info.id}.png`} width={60}/>\r\n            </ImageWrapper>\r\n            <Progress percent={100*currentStep/maxStep} style={{width: \"90%\"}}/>\r\n            <div style={{marginTop: 3, width: \"90%\", display: \"flex\", justifyContent: \"space-between\"}}>\r\n                <Button.Group>\r\n                    <Button onClick={onMinus}   icon={<MinusOutlined />} />\r\n                    <Button onClick={onPlus}    icon={<PlusOutlined />} />\r\n                </Button.Group>\r\n                <b style={{margin: \"5px\", fontSize: \"15px\"}}>{currentStep > 0 ? formatMessage({id: MANIFEST_STEPS[currentStep]}) : MANIFEST_STEPS[currentStep]}</b>\r\n            </div>\r\n        </FlexColumnCenterDiv>\r\n    )\r\n}\r\n\r\nexport default CharacterManifest","import { Button, Collapse, Divider, Popconfirm } from 'antd';\r\nimport React, { useContext } from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { AnotherContext } from '../../contexts'\r\nimport { MANIFEST_STEPS } from '../../data/constant';\r\nimport { directButtonLink, emptyImage } from '../../util/commonComponent';\r\nimport { new_manifest_to_top } from '../../util/function';\r\nimport { GridDiv, PageWrapper } from '../../util/styles';\r\nimport CharacterManifest from '../atoms/CharacterManifest';\r\nimport CharacterResult from '../atoms/CharacterResult';\r\n\r\nconst { Panel } = Collapse;\r\n\r\n/**\r\n * ManifestPage\r\n * \r\n * 체크리스트를 토대로 현현 도감을 표시해 줍니다.\r\n */\r\nfunction ManifestPage() {\r\n\r\n    // intl, context load\r\n    const { formatMessage } = useIntl()\r\n    const { inven, manifest, setManifest, select_char_data, version } = useContext(AnotherContext)\r\n\r\n    \r\n    // result_char_data : 단어순 + 속성 정렬\r\n    const result_char_data = [...select_char_data].sort(function(a, b) {\r\n      return formatMessage({id: a.code}) < formatMessage({id: b.code}) ? -1 \r\n           : formatMessage({id: a.code}) > formatMessage({id: b.code}) ? 1 : 0;\r\n    }).sort(function(a, b) {\r\n      return Math.floor(a.category/10) - Math.floor(b.category/10)\r\n    });\r\n\r\n    /**\r\n     * @param MyCharacter: 가지고 있는 캐릭터의 정보. 출시되지 않은 데이터가 있는 경우 제외시킨다.\r\n     */\r\n    const MyCharacter: CharacterInfo[] = result_char_data.filter(info => inven.includes(info.id))\r\n    .filter(e => {\r\n        if(version===\"japanese\") return !e.gonly\r\n        else return !e.jonly\r\n    })\r\n\r\n    // 클래스 체인지 가능 캐릭터 id 배열을 계산하는 함수\r\n    const render_cc_id = () => {\r\n        let tempIds = [] as number[]\r\n        MyCharacter.forEach((a) => {\r\n            tempIds = tempIds.concat(a?.change || [])\r\n        })\r\n        return Array.from(new Set(tempIds)).filter(id => !inven.includes(id))\r\n    }\r\n\r\n    // 현현 상태를 반환하는 함수\r\n    const get_manifest_status = (target: CharacterInfo) => {\r\n        // 1. 해당 캐릭터가 있으면 끝\r\n        if (inven.includes(target.id)) return \"ok\"\r\n        \r\n        if (target.style !== \"ns\") {\r\n            // 2-1. ns가 아닌 경우 CC가 가능하면 끝.\r\n            if (render_cc_id().includes(target.id)) return \"manifest_error2\" // 클래스 체인지가 필요합니다.\r\n            else return \"manifest_error3\" // 캐릭터를 보유하고 있지 않습니다.\r\n        } else {\r\n            // 2-2. ns인 경우 스타일을 다 봐야함.\r\n            const styles = MyCharacter.filter(a => a.code === target.code).map(a => a.style)\r\n            if (!styles.includes(\"4.5\")) {\r\n                // 4.5가 없으면 CC or 보유하지 않은 것\r\n                return render_cc_id().includes(target.id) ? \"manifest_error2\" : \"manifest_error3\"\r\n            } else {\r\n                // 4.5가 있고 다른 스타일이 있으면 현현이 가능함. 아니면 CC\r\n                return styles.includes(\"as\") || styles.includes(\"es\") ? \"ok\" : \"manifest_error2\"\r\n            }\r\n        }\r\n    }\r\n\r\n    // 설정값에 따라 데이터를 filter\r\n    const filtered = result_char_data.filter(e => {\r\n        if(version===\"japanese\") return e.manifest_jap !== \"없음\"\r\n        else return e.manifest_glo !== \"없음\"\r\n    })\r\n\r\n    new_manifest_to_top(filtered, version)\r\n\r\n    // 현현 완료 / 미완료 목록\r\n    const manifest_incomplete = filtered.filter(a => (get_manifest_status(a) === \"ok\"))\r\n    .filter(a => {\r\n        const steps = version===\"japanese\" ? MANIFEST_STEPS.indexOf(a.manifest_jap) : MANIFEST_STEPS.indexOf(a.manifest_glo)\r\n        return (manifest.find(b => b%10000 === a.id) || 0) < steps*10000 + a.id\r\n    })\r\n    const manifest_complete = filtered.filter(a => (get_manifest_status(a) === \"ok\"))\r\n    .filter(a => {\r\n        const steps = version===\"japanese\" ? MANIFEST_STEPS.indexOf(a.manifest_jap) : MANIFEST_STEPS.indexOf(a.manifest_glo)\r\n        return (manifest.find(b => b%10000 === a.id) || 0) >= steps*10000 + a.id\r\n    })\r\n\r\n    // 현현 All Clear 메시지\r\n    const manifestMessage = <div>\r\n        <h3>{formatMessage({id: \"manifest_message\"})}</h3>\r\n        {manifest_incomplete.map((info, index) => (\r\n            <CharacterResult key={index} {...info}/>\r\n        ))}\r\n    </div>\r\n\r\n    // 미완료된 모든 현현을 완료 처리하는 함수\r\n    const clearAll = () => {\r\n        const new_manifests = manifest_incomplete.map(info => {\r\n            const maxStep = version===\"japanese\" ? MANIFEST_STEPS.indexOf(info.manifest_jap) : MANIFEST_STEPS.indexOf(info.manifest_glo)\r\n            return maxStep*10000 + info.id\r\n        })\r\n        const filtered_manifests = manifest.filter(a => !manifest_incomplete.map(info => info.id).includes(a%10000))\r\n        const total_manifests = [...filtered_manifests, ...new_manifests]\r\n        window.localStorage.setItem(\"a_man\", total_manifests.join(\",\"))\r\n        setManifest(total_manifests)\r\n    }\r\n\r\n    return (\r\n        <PageWrapper style={{maxWidth: \"1200px\"}}>\r\n            {directButtonLink(\"/\", \"Back to Checklist\")}\r\n            <Divider style={{margin: 5}}/>\r\n            <Popconfirm\r\n                title={manifestMessage}\r\n                onConfirm={clearAll}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button shape='round' style={{ height: 35, width: 110, fontSize: \"1rem\", fontWeight: 600, margin: \"5px auto\"}} type=\"primary\" danger>ALL CLEAR</Button>\r\n            </Popconfirm>\r\n            <GridDiv>\r\n                {manifest_incomplete.length > 0 ? manifest_incomplete.map(info => <CharacterManifest key={info.id} {...info}/>) : emptyImage}\r\n            </GridDiv>\r\n            <Collapse defaultActiveKey={['3', \"4\"]} style={{fontSize: \"1rem\", fontWeight: 600}}>\r\n                <Panel header=\"Complete\" key=\"2\">\r\n                    <GridDiv>\r\n                        {manifest_complete.length > 0 ? manifest_complete.map(info => <CharacterManifest key={info.id} {...info}/>) : emptyImage}\r\n                    </GridDiv>\r\n                </Panel>\r\n                <Panel header={formatMessage({id: \"manifest_error2\"})} key=\"3\">\r\n                    {filtered.filter(a => get_manifest_status(a) === \"manifest_error2\").map((info, index) => (\r\n                        <CharacterResult key={index} {...info}/>\r\n                    ))}\r\n                </Panel>\r\n                <Panel header={formatMessage({id: \"manifest_error3\"})} key=\"4\">\r\n                    {filtered.filter(a => get_manifest_status(a) === \"manifest_error3\").map((info, index) => (\r\n                        <CharacterResult key={index} {...info}/>\r\n                    ))}\r\n                </Panel>\r\n            </Collapse>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default ManifestPage","import React, { useContext, useEffect} from 'react';\nimport { IntlProvider } from 'react-intl';\nimport Swal from 'sweetalert2';\nimport { AnotherContext } from './contexts';\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Sidebar from './components/organisms/Sidebar';\nimport MainPage from './components/pages/MainPage';\nimport ResultPage from './components/pages/ResultPage';\nimport BookPage from './components/pages/BookPage';\nimport { BackTop } from 'antd';\nimport PersonalPage from './components/pages/PersonalPage';\nimport ManifestPage from './components/pages/ManifestPage';\n\nconst announceHTML = `<div class=\"announce\">\n  Up to GLOBAL 2.11.700\n  <br/>\n  수제트(シュゼット, Suzette) ES  + Etc.\n  <br/>\n  <br/>\n  자세한 사항은 링크를 확인해 주세요. \n  <br/>\n  Please Check following link.\n  <br/>\n  <a href=\"https://aecheck.tistory.com/11\" target=\"_blank\" rel=\"noreferrer\">Patch Note</a>\n</div>`\n\nfunction App() {\n\n  const announceViewed = Boolean(window.localStorage.getItem(\"a_v_220519\"))\n\n  const { lang } = useContext(AnotherContext)\n  const message = require(`./language/${lang}.json`)\n\n  useEffect(() => {\n    window.localStorage.removeItem(\"a_v_220515\")\n    if(!announceViewed) {\n      window.localStorage.removeItem(\"a_v\")\n      window.localStorage.removeItem(\"a_v_2\")\n      Swal.fire({\n        title: 'Update - 22.05.19',\n        html: announceHTML,\n        icon: 'success',\n      }).then(() => {\n        window.localStorage.setItem(\"a_v_220519\", \"true\")\n      })\n    }\n  }, [announceViewed])\n\n  return (\n    <IntlProvider messages={message} locale={lang} defaultLocale='ko'>\n      <Router basename=\"/anothercharcheck\">\n          <Sidebar/>\n          <Routes>\n              <Route path=\"/\" element={<MainPage/>} />\n              <Route path=\"/result\" element={<ResultPage/>} />\n              <Route path=\"/books\" element={<BookPage/>} />\n              <Route path=\"/person\" element={<PersonalPage/>} />\n              <Route path=\"/manifest\" element={<ManifestPage/>} />\n          </Routes>\n      </Router>\n      <BackTop/>\n    </IntlProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport { AnotherProvider } from './contexts';\nimport ReactGA from 'react-ga';\n\n// Analytics 적용(?)\nReactGA.initialize('UA-190586417-2');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nReactDOM.render(\n  <React.StrictMode>\n    <AnotherProvider>\n      <App />\n    </AnotherProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}